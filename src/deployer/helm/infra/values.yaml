# Declare global configurations
global:
  kibanaEnabled: true

############### Kafka and Zookeeper ####################
## Reference: https://github.com/bitnami/charts/blob/main/bitnami/kafka/values.yaml
kafka:
  enabled: true
  fullnameOverride: "kafka"

  configurationOverrides:
    auto.create.topics.enable: "true"

  persistence:
    enabled: true
  
  externalAccess:
    enabled: false

  listeners:
    client:
      protocol: PLAINTEXT
    interBroker:
      protocol: PLAINTEXT

  extraEnvVars:
    - name: KAFKA_CFG_ADVERTISED_LISTENERS
      value: PLAINTEXT://kafka:9092

  auth:
    enabled: false
    clientProtocol: plaintext

  ## https://github.com/bitnami/charts/blob/main/bitnami/zookeeper/values.yaml
  zookeeper:
    persistence:
      enabled: true
    fullnameOverride: "zookeeper"

  ## Kafka provisioning
  provisioning:
    enabled: true
    numPartitions: 1
    replicationFactor: 1

    topics:
      - name: KAFKA_AUDITS_TOPIC
        value: audits
      - name: KAFKA_LOGS_TOPIC
        value: logs
      - name: AccountLookupBcRequests
        value: AccountLookupBcRequests
      - name: AccountLookupBcEvents
        value: AccountLookupBcEvents
      - name: AccountLookupBcResponses
        value: AccountLookupBcResponses
      - name: AccountLookupBcErrors
        value: AccountLookupBcErrors
      - name: OperatorBcErrors
        value: OperatorBcErrors
      - name: QuotingBcErrors
        value: QuotingBcErrors
      - name: QuotingBcEvents
        value: QuotingBcEvents
      - name: QuotingBcRequests
        value: QuotingBcRequests
      - name: SettlementsBcRequests
        value: SettlementsBcRequests
      - name: TransfersBcErrors
        value: TransfersBcErrors
      - name: TransfersBcEvents
        value: TransfersBcEvents
      - name: TransfersBcRequests
        value: TransfersBcRequests
      - name: SettlementsBcEvents
        value: SettlementsBcEvents
      - name: SettlementsBcCommands
        value: SettlementsBcCommands
      - name: PlatformConfigurationBcEvents
        value: PlatformConfigurationBcEvents
      - name: TransfersBcTimeouts
        value: TransfersBcTimeouts
      - name: ParticipantsBcEvents
        value: ParticipantsBcEvents
      - name: SchedulingBcCommands
        value: SchedulingBcCommands
      - name: SchedulingBcEvents
        value: SchedulingBcEvents
      - name: SecurityBcAuthorizationEvents
        value: SecurityBcAuthorizationEvents
      - name: SecurityBcEvents
        value: SecurityBcEvents

    nodeSelector: {}
    tolerations: []
    waitForKafka: true
############### Kafka and Zookeeper ####################

############### RedPanda Console for Kafka  ####################
# https://artifacthub.io/packages/helm/redpanda-data/console?modal=values
# redpanda kakfa console config

redpanda-console:
  enabled: true
  fullnameOverride: rpconsole

  console:
    config:
      kafka:
        brokers:
          - kafka:9092

  ingress:
    enabled: true
    className: nginx
    hosts:
      - host: redpanda-console.mifos.gazelle.test
        paths:
          - path: /
            pathType: ImplementationSpecific

############### MongoDB  ####################
#         older amd64 specific 
# https://github.com/bitnami/charts/tree/main/bitnami/mongodb
# mongodb:
#   enabled: true
#   image:
#     tag: 5.0.18-debian-11-r8

#   fullnameOverride: "mongodb"
#   auth:
#     enabled: true

#     rootUser: root
#     rootPassword: mongoDbPas42
#     usernames:
#     - 'mojaloop'
#     passwords:
#     - 'password'
#     databases:
#     - 'mlos'

#     replicaSetKey: ""
#     existingSecret: ""
#   persistence:
#     enabled: false
################### end of  older gazelle v1.1.0 amd64 only ##############

mongodb:
  enabled: true
  persistence:
    enabled: false
  # image:
  #   tag: 7.0

  fullnameOverride: mongodb
  settings:
    rootUsername: root
    rootPassword: mongoDbPas42
############### Mongo Express ####################
# mongo express config
mongo-express:
  fullnameOverride: mongo-express
  enabled: true

  # image:
  #   tag: 1.0.0

  ingress:
    enabled: true
    ingressClassName: nginx
    hosts:
      - host: mongoexpress.mifos.gazelle.test
        paths:
          - /

  mongodbEnableAdmin: true
  mongodbAdminUsername: root
  mongodbAdminPassword: mongoDbPas42

  basicAuthUsername: admin
  basicAuthPassword: admin

  # livenessProbe:
  #   enabled: false
  # readinessProbe:
  #   enabled: false
  extraEnv:
    - name: ME_CONFIG_MONGODB_URL
      value: "mongodb://root:mongoDbPas42@mongodb:27017/"

############### Redis  ####################
## Reference: https://github.com/bitnami/charts/blob/main/bitnami/redis/values.yaml
redis:
  enabled: true
  fullnameOverride: redis
  architecture: standalone
  auth:
    enabled: false
  master:
    disableCommands: []
    persistence:
      enabled: false

############### Elasticsearch and Kibana  ####################
elasticsearch:
  enabled: true
  #fullnameOverride: "fredelastic"

  security:
    elasticPassword: elasticSearchPas42
    tls:
      restEncryption: false

  coordinating:
    replicaCount: 1

  master:
    masterOnly: false
    replicaCount: 1
    persistence:
      enabled: true
  data:
    replicaCount: 0
  coordinating:
    replicaCount: 0
  ingest:
    replicaCount: 0

  ingress:
    enabled: true
    ingressClassName: nginx
    hostname: elasticsearch.mifos.gazelle.test
    tls:
      - enabled: false

  kibana:
    ingress:
      enabled: true
      ingressClassName: nginx
      hostname: kibana.mifos.gazelle.test
      tls:
        enabled: false

############### MySQL  ####################
mysql:
  fullnameOverride: "mysql"
  enabled: true
  auth:
    database: "tenants"
    username: "mifos"
    password: "password"
    rootPassword: "mysqlpw"
    # rootPassword: "ethieTieCh8ahv"
  image:
    tag: "5.7"
    debug: false
  initdbScripts:
    setup.sql: |-
      CREATE DATABASE IF NOT EXISTS messagegateway;
      CREATE DATABASE IF NOT EXISTS `identity_account_mapper`;
      CREATE DATABASE IF NOT EXISTS `voucher_management`;
      CREATE DATABASE IF NOT EXISTS `fineract_tenants`;
      CREATE DATABASE IF NOT EXISTS `fineract_default`;
      CREATE DATABASE IF NOT EXISTS `greenbank`;
      CREATE DATABASE IF NOT EXISTS `bluebank`;
      GRANT ALL PRIVILEGES ON messagegateway.* TO 'mifos';
      GRANT ALL PRIVILEGES ON `identity_account_mapper`.* TO 'mifos';
      GRANT ALL PRIVILEGES ON `voucher_management`.* TO 'mifos';
      GRANT ALL PRIVILEGES ON `fineract_tenants`.* TO 'mifos';
      GRANT ALL PRIVILEGES ON `fineract_default`.* TO 'mifos';
      GRANT ALL PRIVILEGES ON `greenbank`.* TO 'mifos';
      GRANT ALL PRIVILEGES ON `bluebank`.* TO 'mifos';
      GRANT ALL ON *.* TO 'root'@'%';

