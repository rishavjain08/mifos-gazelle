version: 2.1

commands:
  deploy_and_verify:
    description: "Deploy Mifos Gazelle and verify health"
    steps:
      - run:
          name: Deploy via run.sh
          command: |
            chmod +x ./run.sh
            echo "Deploying on $(uname -m)..."
            sudo ./run.sh -m deploy -u "$USER" -a all -d true

      - run:
          name: Verify pods are running
          command: |
            echo "Checking pod readiness..."
            if ! command -v kubectl &> /dev/null; then
              echo "ERROR: kubectl not found"; exit 1
            fi
            if ! kubectl cluster-info &> /dev/null; then
              echo "ERROR: Cannot connect to cluster"; exit 1
            fi

            if ! kubectl wait --for=condition=Ready pods --all --all-namespaces --timeout=300s; then
              echo "Failure: Some pods are not ready"; kubectl get pods --all-namespaces; exit 1
            fi

      - run:
          name: Configure hosts & Health check endpoints
          command: |
            # TODO: set this properly (static IP or from deploy output)
            VM_IP="127.0.0.1"

            echo "Configuring /etc/hosts with $VM_IP ..."
            sudo tee -a /etc/hosts > /dev/null <<EOF
            $VM_IP mifos.mifos.gazelle.test fineract.mifos.gazelle.test
            $VM_IP vnextadmin.mifos.gazelle.test elasticsearch.mifos.gazelle.test kibana.mifos.gazelle.test mongoexpress.mifos.gazelle.test kafkaconsole.mifos.gazelle.test fspiop.mifos.gazelle.test bluebank.mifos.gazelle.test greenbank.mifos.gazelle.test redpanda-console.mifos.gazelle.test
            $VM_IP ops.mifos.gazelle.test kibana-phee.mifos.gazelle.test zeebe-operate.mifos.gazelle.test
            EOF

            echo "Running health checks..."
            endpoints=(
              "http://mifos.mifos.gazelle.test"
              "http://vnextadmin.mifos.gazelle.test"
              "http://ops.mifos.gazelle.test"
            )

            for url in "${endpoints[@]}"; do
              echo "Checking $url ..."
              if curl -sf "$url/health"; then
                echo "✅ $url is healthy"
              else
                echo "❌ $url failed health check"; exit 1
              fi
            done

jobs:
  deploy-test-amd64:
    machine:
      image: ubuntu-2004:current
    resource_class: large
    steps:
      - checkout
      - deploy_and_verify

  deploy-test-arm64:
    machine:
      image: ubuntu-2004:current
    resource_class: arm.large
    steps:
      - checkout
      - deploy_and_verify

workflows:
  version: 2
  test-multi-arch:
    jobs:
      - deploy-test-amd64
      # - deploy-test-arm64
